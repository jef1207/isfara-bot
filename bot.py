import asyncio
from datetime import datetime, timedelta, time
import logging
import sqlite3
from uuid import uuid4
from telegram import (
    Update, 
    ReplyKeyboardMarkup, 
    ReplyKeyboardRemove,
    KeyboardButton,
    WebAppInfo  # –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç WebAppInfo
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler
)
from telegram.helpers import escape_markdown

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = "8465822681:AAGKGiqX5VgOzmV64yMOV5vMt4tFId6izkY"
DB_FILE = "support_bot.db"
ADMIN_CHAT_ID = "6749042856"  # –í–∞—à chat_id

# –†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è (10:00-18:00)
WORK_START = time(10, 0)
WORK_END = time(18, 0)

# –°–æ—Å—Ç–æ—è–Ω–∏—è ConversationHandler
(
    SELECT_PROBLEM, GET_SCREENSHOT, GET_SERIAL, 
    GET_PHONE_MODEL, RETURN_REQUEST, CASHBACK_REQUEST
) = range(6)

def init_db():
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    
    cursor.execute('''CREATE TABLE IF NOT EXISTS tickets
                     (id TEXT PRIMARY KEY,
                      user_id INTEGER,
                      username TEXT,
                      request_type TEXT,
                      status TEXT DEFAULT 'pending',
                      screenshot_id TEXT,
                      serial_photo_id TEXT,
                      phone_model TEXT,
                      created_at TEXT,
                      reviewed_at TEXT,
                      admin_comment TEXT,
                      admin_message_id INTEGER)''')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ–º, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    cursor.execute("PRAGMA table_info(tickets)")
    columns = [column[1] for column in cursor.fetchall()]
    if 'admin_message_id' not in columns:
        cursor.execute('''ALTER TABLE tickets ADD COLUMN admin_message_id INTEGER''')
    
    conn.commit()
    conn.close()

def main_menu():
    return ReplyKeyboardMarkup([
        ["üîπ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≥–∞—Ä–∞–Ω—Ç–∏—é", "üîπ –ü—Ä–æ–±–ª–µ–º–∞ —Å –∑–∞—Ä—è–¥–∫–æ–π"],
        ["üîπ –ù–µ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞—É—à–Ω–∏–∫–∏", "üîπ –í–æ–∑–≤—Ä–∞—Ç —Ç–æ–≤–∞—Ä–∞"],
        ["üîπ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", "üîπ –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π"]
    ], resize_keyboard=True)

def is_working_hours():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —Ä–∞–±–æ—á–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ"""
    now = datetime.now().time()
    return WORK_START <= now <= WORK_END

async def check_working_hours(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –≤—Ä–µ–º—è –Ω–µ—Ä–∞–±–æ—á–µ–µ"""
    if not is_working_hours():
        await update.message.reply_text(
            "‚è≥ –í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.\n"
            "–†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è: —Å 10:00 –¥–æ 18:00.\n"
            "–í–∞—à –∑–∞–ø—Ä–æ—Å –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è.",
            reply_markup=main_menu()
        )
        return False
    return True

async def check_user_can_request(user_id: int, request_type: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É"""
    try:
        conn = sqlite3.connect(DB_FILE)
        cursor = conn.cursor()
        
        cursor.execute('''SELECT created_at, status 
                          FROM tickets 
                          WHERE user_id = ? AND request_type = ?
                          ORDER BY created_at DESC 
                          LIMIT 1''', (user_id, request_type))
        last_request = cursor.fetchone()
        
        if not last_request:
            return True
            
        created_at_str, status = last_request
        created_at = datetime.strptime(created_at_str, "%Y-%m-%d %H:%M:%S")
        
        if status == 'pending':
            return False
            
        if datetime.now() - created_at < timedelta(hours=24):
            return False
            
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return False
    finally:
        conn.close()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –¢–µ—Ö–Ω–æ–ª!\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:",
        reply_markup=main_menu()
    )

async def handle_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    context.user_data.clear()
    user = update.effective_user
    
    if text == "üîπ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≥–∞—Ä–∞–Ω—Ç–∏—é":
        if not await check_working_hours(update, context):
            return ConversationHandler.END
            
        request_type = "warranty_activation"
        can_request = await check_user_can_request(user.id, request_type)
        if not can_request:
            await update.message.reply_text(
                "‚ùå –í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é –≥–∞—Ä–∞–Ω—Ç–∏–∏. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞.",
                reply_markup=main_menu()
            )
            return ConversationHandler.END
            
        context.user_data['request_type'] = request_type
        await update.message.reply_text(
            "–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≥–∞—Ä–∞–Ω—Ç–∏–∏ –ø—Ä–∏—à–ª–∏—Ç–µ:\n1. –°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–∫—É–ø–∫–∏\n2. –§–æ—Ç–æ —Å–µ—Ä–∏–π–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞\n3. –ú–æ–¥–µ–ª—å —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç:",
            reply_markup=ReplyKeyboardRemove()
        )
        return GET_SCREENSHOT
        
    elif text == "üîπ –ü—Ä–æ–±–ª–µ–º–∞ —Å –∑–∞—Ä—è–¥–∫–æ–π":
        await update.message.reply_text(
            "üîã –ü—Ä–æ–±–ª–µ–º—ã —Å –∑–∞—Ä—è–¥–∫–æ–π:\n1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–∞–±–µ–ª—å\n2. –ó–∞—Ä—è–∂–∞–π—Ç–µ 2-3 —á–∞—Å–∞\n3. –ò–∑–±–µ–≥–∞–π—Ç–µ –∫–∞–±–µ–ª–µ–π –æ—Ç iPhone\n4. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ –Ω–∞—É—à–Ω–∏–∫–∏",
            reply_markup=main_menu()
        )
        
    elif text == "üîπ –ù–µ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞—É—à–Ω–∏–∫–∏":
        await update.message.reply_text(
            "üîÑ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ:\n1. –ó–∞—Ä—è–¥–∏—Ç–µ 4-5 —á–∞—Å–æ–≤\n2. –£–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –∫–Ω–æ–ø–∫—É 50 —Å–µ–∫\n3. –î–ª—è –æ–¥–Ω–æ–≥–æ –Ω–∞—É—à–Ω–∏–∫–∞ - —É–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ —É–≥–ª—É–±–ª–µ–Ω–∏–µ",
            reply_markup=main_menu()
        )
        
    elif text == "üîπ –í–æ–∑–≤—Ä–∞—Ç —Ç–æ–≤–∞—Ä–∞":
        if not await check_working_hours(update, context):
            return ConversationHandler.END
            
        request_type = "return_request"
        can_request = await check_user_can_request(user.id, request_type)
        if not can_request:
            await update.message.reply_text(
                "‚ùå –í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç —Ç–æ–≤–∞—Ä–∞. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞.",
                reply_markup=main_menu()
            )
            return ConversationHandler.END
            
        context.user_data['request_type'] = request_type
        await update.message.reply_text(
            "–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø—Ä–∏—à–ª–∏—Ç–µ:\n1. –°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–∫—É–ø–∫–∏\n2. –§–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞\n3. –ü—Ä–∏—á–∏–Ω—É –≤–æ–∑–≤—Ä–∞—Ç–∞\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç:",
            reply_markup=ReplyKeyboardRemove()
        )
        return GET_SCREENSHOT
        
    elif text == "üîπ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è":
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å WebApp
        web_app_button = KeyboardButton(
            text="üìñ –û—Ç–∫—Ä—ã—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é",
            web_app=WebAppInfo(url="https://your-mini-app-url.com")  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à URL
        )
        back_button = KeyboardButton("üîô –ù–∞–∑–∞–¥")
        
        keyboard = ReplyKeyboardMarkup([[web_app_button], [back_button]], resize_keyboard=True)
        
        await update.message.reply_text(
            "üìö –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –Ω–∞—à–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤:",
            reply_markup=keyboard
        )
        
    elif text == "üîπ –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π":
        if not await check_working_hours(update, context):
            return ConversationHandler.END
            
        request_type = "support_request"
        can_request = await check_user_can_request(user.id, request_type)
        if not can_request:
            await update.message.reply_text(
                "‚ùå –í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –≤–æ–ø—Ä–æ—Å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞.",
                reply_markup=main_menu()
            )
            return ConversationHandler.END
            
        context.user_data['request_type'] = request_type
        await update.message.reply_text(
            "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ –º—ã –æ—Ç–≤–µ—Ç–∏–º –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è (10:00-18:00):",
            reply_markup=ReplyKeyboardRemove()
        )
        return SELECT_PROBLEM

    elif text == "üîô –ù–∞–∑–∞–¥":
        await update.message.reply_text(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –¢–µ—Ö–Ω–æ–ª!\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:",
            reply_markup=main_menu()
        )

async def handle_support_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await check_working_hours(update, context):
        return ConversationHandler.END
    
    if not update.message.text:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–æ–º")
        return SELECT_PROBLEM
    
    user_question = update.message.text
    user = update.effective_user
    ticket_id = str(uuid4())[:6].upper()
    
    try:
        conn = sqlite3.connect(DB_FILE)
        cursor = conn.cursor()
        
        cursor.execute('''INSERT INTO tickets 
                         (id, user_id, username, request_type, status,
                          admin_comment, created_at)
                         VALUES (?, ?, ?, ?, ?, ?, ?)''',
                         (ticket_id, user.id, 
                          user.username,
                          "support_request",
                          "pending",
                          user_question,
                          datetime.now().strftime("%Y-%m-%d %H:%M:%S")))
        
        conn.commit()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞: {e}")
    finally:
        conn.close()
    
    try:
        admin_message = (f"üÜï –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É #{ticket_id}\n"
                       f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.username or '–Ω–µ—Ç'} (ID: {user.id})\n"
                       f"‚ùì –í–æ–ø—Ä–æ—Å:\n{user_question}\n\n"
                       f"–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
        
        sent_msg = await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=admin_message)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect(DB_FILE)
        cursor = conn.cursor()
        cursor.execute('''UPDATE tickets SET admin_message_id = ? WHERE id = ?''',
                     (sent_msg.message_id, ticket_id))
        conn.commit()
        conn.close()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")
    
    await update.message.reply_text(
        "‚úÖ –í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É! –ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è (10:00-18:00).",
        reply_markup=main_menu()
    )
    return ConversationHandler.END

async def handle_screenshot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await check_working_hours(update, context):
        return ConversationHandler.END
    
    if update.message.photo:
        context.user_data['screenshot_id'] = update.message.photo[-1].file_id
        request_type = context.user_data.get('request_type')
        
        if request_type == "warranty_activation":
            await update.message.reply_text("üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–ª—É—á–µ–Ω. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å–µ—Ä–∏–π–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞:")
            return GET_SERIAL
        elif request_type == "return_request":
            await update.message.reply_text("üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–ª—É—á–µ–Ω. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞:")
            return GET_SERIAL
        elif request_type == "cashback_request":
            await update.message.reply_text("üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–∑—ã–≤–∞ –ø–æ–ª—É—á–µ–Ω. –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:")
            return CASHBACK_REQUEST
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∫–∞–∫ —Ñ–æ—Ç–æ")
        return GET_SCREENSHOT

async def handle_serial_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await check_working_hours(update, context):
        return ConversationHandler.END
    
    if update.message.photo:
        context.user_data['serial_photo_id'] = update.message.photo[-1].file_id
        request_type = context.user_data.get('request_type')
        
        if request_type == "warranty_activation":
            await update.message.reply_text("üî¢ –°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ–ª—É—á–µ–Ω. –£–∫–∞–∂–∏—Ç–µ –º–æ–¥–µ–ª—å —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
            return GET_PHONE_MODEL
        elif request_type == "return_request":
            await update.message.reply_text("üì¶ –§–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ –ø–æ–ª—É—á–µ–Ω–æ. –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –≤–æ–∑–≤—Ä–∞—Ç–∞:")
            return RETURN_REQUEST
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ")
        return GET_SERIAL

async def handle_phone_model(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await check_working_hours(update, context):
        return ConversationHandler.END
    
    if not update.message.text:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –º–æ–¥–µ–ª—å —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Ç–µ–∫—Å—Ç–æ–º")
        return GET_PHONE_MODEL
    
    context.user_data['phone_model'] = update.message.text
    await complete_request(update, context)
    return ConversationHandler.END

async def handle_return_reason(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await check_working_hours(update, context):
        return ConversationHandler.END
    
    if not update.message.text:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –≤–æ–∑–≤—Ä–∞—Ç–∞")
        return RETURN_REQUEST
    
    context.user_data['return_reason'] = update.message.text
    await complete_request(update, context)
    return ConversationHandler.END

async def handle_cashback_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await check_working_hours(update, context):
        return ConversationHandler.END
    
    if not update.message.text:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞")
        return CASHBACK_REQUEST
    
    context.user_data['card_number'] = update.message.text
    await complete_request(update, context)
    return ConversationHandler.END

async def complete_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    request_type = context.user_data.get('request_type')
    ticket_id = str(uuid4())[:6].upper()
    user = update.effective_user
    
    try:
        conn = sqlite3.connect(DB_FILE)
        cursor = conn.cursor()
        
        if request_type == "warranty_activation":
            cursor.execute('''INSERT INTO tickets 
                             (id, user_id, username, request_type, status,
                              screenshot_id, serial_photo_id, phone_model, created_at)
                             VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)''',
                             (ticket_id, user.id, 
                              user.username,
                              request_type,
                              "pending",
                              context.user_data['screenshot_id'],
                              context.user_data['serial_photo_id'],
                              context.user_data['phone_model'],
                              datetime.now().strftime("%Y-%m-%d %H:%M:%S")))
            
            response_text = "‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é –≥–∞—Ä–∞–Ω—Ç–∏–∏ –ø–æ–ª—É—á–µ–Ω!"
            
        elif request_type == "return_request":
            cursor.execute('''INSERT INTO tickets 
                             (id, user_id, username, request_type, status,
                              screenshot_id, serial_photo_id, admin_comment, created_at)
                             VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)''',
                             (ticket_id, user.id, 
                              user.username,
                              request_type,
                              "pending",
                              context.user_data['screenshot_id'],
                              context.user_data['serial_photo_id'],
                              context.user_data['return_reason'],
                              datetime.now().strftime("%Y-%m-%d %H:%M:%S")))
            
            response_text = "‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç —Ç–æ–≤–∞—Ä–∞ –ø–æ–ª—É—á–µ–Ω!"
            
        elif request_type == "cashback_request":
            cursor.execute('''INSERT INTO tickets 
                             (id, user_id, username, request_type, status,
                              screenshot_id, admin_comment, created_at)
                             VALUES (?, ?, ?, ?, ?, ?, ?, ?)''',
                             (ticket_id, user.id, 
                              user.username,
                              request_type,
                              "pending",
                              context.user_data['screenshot_id'],
                              context.user_data['card_number'],
                              datetime.now().strftime("%Y-%m-%d %H:%M:%S")))
            
            response_text = "‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫—ç—à–±—ç–∫ –ø–æ–ª—É—á–µ–Ω!"
        elif request_type == "support_request":
            cursor.execute('''INSERT INTO tickets 
                             (id, user_id, username, request_type, status,
                              admin_comment, created_at)
                             VALUES (?, ?, ?, ?, ?, ?, ?)''',
                             (ticket_id, user.id, 
                              user.username,
                              request_type,
                              "pending",
                              context.user_data.get('question', update.message.text),
                              datetime.now().strftime("%Y-%m-%d %H:%M:%S")))
            
            response_text = "‚úÖ –í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!"
        
        conn.commit()
        
        response_text += "\n–ù–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –µ–≥–æ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
        await update.message.reply_text(response_text, reply_markup=main_menu())
        
        await notify_admin(context, ticket_id, request_type, user)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∏–∫–µ—Ç–∞: {e}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=main_menu()
        )
    finally:
        conn.close()
        context.user_data.clear()
    return ConversationHandler.END

async def notify_admin(context: ContextTypes.DEFAULT_TYPE, ticket_id: str, request_type: str, user):
    try:
        conn = sqlite3.connect(DB_FILE)
        cursor = conn.cursor()
        
        if request_type == "warranty_activation":
            cursor.execute('''SELECT phone_model, screenshot_id, serial_photo_id 
                            FROM tickets WHERE id = ?''', (ticket_id,))
            phone_model, screenshot_id, serial_photo_id = cursor.fetchone()
            
            message_text = (f"üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≥–∞—Ä–∞–Ω—Ç–∏—é #{ticket_id}\n"
                         f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.username or '–Ω–µ—Ç'} (ID: {user.id})\n"
                         f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone_model}\n\n"
                         f"–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
            
            sent_msg = await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=message_text)
            await context.bot.send_photo(chat_id=ADMIN_CHAT_ID, photo=screenshot_id)
            await context.bot.send_photo(chat_id=ADMIN_CHAT_ID, photo=serial_photo_id)
            
        elif request_type == "return_request":
            cursor.execute('''SELECT admin_comment, screenshot_id, serial_photo_id 
                            FROM tickets WHERE id = ?''', (ticket_id,))
            return_reason, screenshot_id, product_photo = cursor.fetchone()
            
            message_text = (f"üÜï –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç #{ticket_id}\n"
                         f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.username or '–Ω–µ—Ç'}\n"
                         f"üì¶ –ü—Ä–∏—á–∏–Ω–∞: {return_reason}\n\n"
                         f"–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
            
            sent_msg = await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=message_text)
            await context.bot.send_photo(chat_id=ADMIN_CHAT_ID, photo=screenshot_id)
            await context.bot.send_photo(chat_id=ADMIN_CHAT_ID, photo=product_photo)
            
        elif request_type == "cashback_request":
            cursor.execute('''SELECT admin_comment, screenshot_id 
                            FROM tickets WHERE id = ?''', (ticket_id,))
            card_number, screenshot_id = cursor.fetchone()
            
            message_text = (f"üÜï –ó–∞–ø—Ä–æ—Å –Ω–∞ –∫—ç—à–±—ç–∫ #{ticket_id}\n"
                         f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.username or '–Ω–µ—Ç'}\n"
                         f"üí≥ –ö–∞—Ä—Ç–∞: {card_number}\n\n"
                         f"–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
            
            sent_msg = await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=message_text)
            await context.bot.send_photo(chat_id=ADMIN_CHAT_ID, photo=screenshot_id)
            
        elif request_type == "support_request":
            cursor.execute('''SELECT admin_comment 
                            FROM tickets WHERE id = ?''', (ticket_id,))
            question = cursor.fetchone()[0]
            
            message_text = (f"üÜï –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É #{ticket_id}\n"
                         f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.username or '–Ω–µ—Ç'}\n"
                         f"‚ùì –í–æ–ø—Ä–æ—Å:\n{question}\n\n"
                         f"–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
            
            sent_msg = await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=message_text)
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–≤—è–∑–∏
        cursor.execute('''UPDATE tickets SET admin_message_id = ? WHERE id = ?''',
                     (sent_msg.message_id, ticket_id))
        conn.commit()
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞: {e}")
    finally:
        conn.close()

async def admin_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞ –∑–∞—è–≤–∫—É"""
    if str(update.effective_user.id) != ADMIN_CHAT_ID:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not update.message.reply_to_message:
        await update.message.reply_text("‚ÑπÔ∏è –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞—è–≤–∫–æ–π, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
        return

    try:
        conn = sqlite3.connect(DB_FILE)
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º ID –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        replied_message_id = update.message.reply_to_message.message_id
        
        # –ò—â–µ–º –∑–∞—è–≤–∫—É –ø–æ ID —Å–æ–æ–±—â–µ–Ω–∏—è
        cursor.execute('''SELECT id, user_id, request_type, status 
                         FROM tickets 
                         WHERE admin_message_id = ?''', (replied_message_id,))
        result = cursor.fetchone()
        
        if not result:
            await update.message.reply_text("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∑–∞—è–≤–∫–∞, —Å–≤—è–∑–∞–Ω–Ω–∞—è —Å —ç—Ç–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º")
            return
            
        ticket_id, user_id, request_type, status = result
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
        if status in ['answered', 'approved', 'rejected']:
            await update.message.reply_text("‚ö†Ô∏è –≠—Ç–∞ –∑–∞—è–≤–∫–∞ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ —Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≤—Å–µ—Ö —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        response_text = (
            f"üì® –û—Ç–≤–µ—Ç –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø–æ –∑–∞—è–≤–∫–µ \\#{escape_markdown(ticket_id, version=2)}\n"
            f"–¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞: {escape_markdown(request_type, version=2)}\n\n"
            f"{escape_markdown(update.message.text, version=2)}"
        )
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å MarkdownV2
            await context.bot.send_message(
                chat_id=user_id, 
                text=response_text,
                parse_mode="MarkdownV2"
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
            cursor.execute('''UPDATE tickets 
                            SET status = 'answered',
                                reviewed_at = ?,
                                admin_comment = ?
                            WHERE id = ?''',
                            (datetime.now().strftime("%Y-%m-%d %H:%M:%S"), 
                             update.message.text, 
                             ticket_id))
            conn.commit()
            
            await update.message.reply_text(
                f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (ID: {user_id})\n"
                f"–¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞: {request_type}\n"
                f"ID –∑–∞—è–≤–∫–∏: #{ticket_id}"
            )
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")

    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}\n\n"
                                      "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:\n"
                                      "1. –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞—è–≤–∫–æ–π\n"
                                      "2. –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç")
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
    finally:
        conn.close()

async def approve_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /approve_TICKETID"""
    if str(update.effective_user.id) != ADMIN_CHAT_ID:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        ticket_id = update.message.text.split('_')[1]
        conn = sqlite3.connect(DB_FILE)
        cursor = conn.cursor()
        
        cursor.execute('''SELECT request_type, user_id, username FROM tickets WHERE id = ?''', (ticket_id,))
        result = cursor.fetchone()
        
        if not result:
            await update.message.reply_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
            
        request_type, user_id, username = result
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
        cursor.execute('''SELECT status FROM tickets WHERE id = ?''', (ticket_id,))
        status = cursor.fetchone()[0]
        
        if status in ['answered', 'approved', 'rejected']:
            await update.message.reply_text("‚ö†Ô∏è –≠—Ç–∞ –∑–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        cursor.execute('''UPDATE tickets 
                         SET status = 'approved',
                             reviewed_at = ?
                         WHERE id = ?''',
                         (datetime.now().strftime("%Y-%m-%d %H:%M:%S"), ticket_id))
        
        conn.commit()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞
        if request_type == "warranty_activation":
            message = (f"üéâ –í–∞—à–∞ –≥–∞—Ä–∞–Ω—Ç–∏—è #{ticket_id} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n"
                     f"–°—Ä–æ–∫ –≥–∞—Ä–∞–Ω—Ç–∏–∏: 3 –º–µ—Å—è—Ü–∞\n"
                     f"–î–∞—Ç–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {datetime.now().strftime('%d.%m.%Y')}")
        elif request_type == "return_request":
            message = (f"‚úÖ –í–∞—à –≤–æ–∑–≤—Ä–∞—Ç #{ticket_id} –æ–¥–æ–±—Ä–µ–Ω!\n"
                     f"–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.")
        elif request_type == "cashback_request":
            message = (f"üí∞ –í–∞—à –∫—ç—à–±—ç–∫ –ø–æ –∑–∞—è–≤–∫–µ #{ticket_id} –æ–¥–æ–±—Ä–µ–Ω!\n"
                     f"–°—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ—Å—Ç—É–ø—è—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 3 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π.")
        elif request_type == "support_request":
            message = (f"‚úÖ –ü–æ –≤–∞—à–µ–º—É –≤–æ–ø—Ä–æ—Å—É #{ticket_id} –¥–∞–Ω –æ—Ç–≤–µ—Ç:\n"
                     f"–ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–º–æ—â—å, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ —Å–Ω–æ–≤–∞.")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await context.bot.send_message(chat_id=user_id, text=message)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        await update.message.reply_text(
            f"‚úÖ –ó–∞—è–≤–∫–∞ #{ticket_id} –æ–¥–æ–±—Ä–µ–Ω–∞\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} —É–≤–µ–¥–æ–º–ª–µ–Ω"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ")
    finally:
        conn.close()

async def reject_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /reject_TICKETID –ü—Ä–∏—á–∏–Ω–∞"""
    if str(update.effective_user.id) != ADMIN_CHAT_ID:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        parts = update.message.text.split(maxsplit=2)
        ticket_id = parts[0].split('_')[1]
        reason = parts[1] if len(parts) >= 2 else "–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
        
        conn = sqlite3.connect(DB_FILE)
        cursor = conn.cursor()
        
        cursor.execute('''SELECT request_type, user_id, username, status 
                         FROM tickets WHERE id = ?''', (ticket_id,))
        result = cursor.fetchone()
        
        if not result:
            await update.message.reply_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
            
        request_type, user_id, username, status = result
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
        if status in ['answered', 'approved', 'rejected']:
            await update.message.reply_text("‚ö†Ô∏è –≠—Ç–∞ –∑–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        cursor.execute('''UPDATE tickets 
                         SET status = 'rejected',
                             reviewed_at = ?,
                             admin_comment = ?
                         WHERE id = ?''',
                         (datetime.now().strftime("%Y-%m-%d %H:%M:%S"), 
                          reason, ticket_id))
        
        conn.commit()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞
        if request_type == "warranty_activation":
            message = (f"‚ùå –í –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≥–∞—Ä–∞–Ω—Ç–∏–∏ #{ticket_id} –æ—Ç–∫–∞–∑–∞–Ω–æ.\n"
                     f"–ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n"
                     f"–î–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")
        elif request_type == "return_request":
            message = (f"‚ùå –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç #{ticket_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω.\n"
                     f"–ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n"
                     f"–î–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")
        elif request_type == "cashback_request":
            message = (f"‚ùå –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫—ç—à–±—ç–∫ #{ticket_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω.\n"
                     f"–ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n"
                     f"–î–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")
        elif request_type == "support_request":
            message = (f"‚ùå –ü–æ –≤–∞—à–µ–º—É –≤–æ–ø—Ä–æ—Å—É #{ticket_id} –ø—Ä–∏–Ω—è—Ç–æ —Ä–µ—à–µ–Ω–∏–µ:\n"
                     f"–ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n"
                     f"–î–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ —Å–Ω–æ–≤–∞.")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await context.bot.send_message(chat_id=user_id, text=message)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        await update.message.reply_text(
            f"‚úÖ –ó–∞—è–≤–∫–∞ #{ticket_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞\n"
            f"–ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} —É–≤–µ–¥–æ–º–ª–µ–Ω"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ")
    finally:
        conn.close()

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await update.message.reply_text(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=main_menu()
    )
    context.user_data.clear()
    return ConversationHandler.END

def main():
    init_db()
    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())
    
    app = Application.builder().token(TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler('start', start))
    app.add_handler(CommandHandler('cancel', cancel))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    app.add_handler(MessageHandler(
        filters.Regex(r'^/approve_') & filters.Chat(chat_id=int(ADMIN_CHAT_ID)),
        approve_request
    ))
    app.add_handler(MessageHandler(
        filters.Regex(r'^/reject_') & filters.Chat(chat_id=int(ADMIN_CHAT_ID)),
        reject_request
    ))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    app.add_handler(MessageHandler(
        filters.TEXT & filters.Chat(chat_id=int(ADMIN_CHAT_ID)) & filters.REPLY,
        admin_reply
    ))
    
    # ConversationHandler
    conv_handler = ConversationHandler(
        entry_points=[
            MessageHandler(filters.Regex(r'^(üîπ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≥–∞—Ä–∞–Ω—Ç–∏—é|üîπ –í–æ–∑–≤—Ä–∞—Ç —Ç–æ–≤–∞—Ä–∞|üîπ –ü–æ–ª—É—á–∏—Ç—å –∫—ç—à–±—ç–∫|üîπ –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π)$'), 
                          handle_main_menu)
        ],
        states={
            SELECT_PROBLEM: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_support_message)],
            GET_SCREENSHOT: [MessageHandler(filters.PHOTO, handle_screenshot)],
            GET_SERIAL: [MessageHandler(filters.PHOTO, handle_serial_photo)],
            GET_PHONE_MODEL: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_phone_model)],
            RETURN_REQUEST: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_return_reason)],
            CASHBACK_REQUEST: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_cashback_request)]
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )
    app.add_handler(conv_handler)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_main_menu))
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    app.run_polling()

if __name__ == '__main__':
    main()